<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    					http://www.springframework.org/schema/beans/spring-beans.xsd
    					http://www.springframework.org/schema/aop 
       					http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 1 创建目标类 -->
	<bean id="userService" class="aop_aspect_xml.UserServiceImpl"></bean>

	<!-- 2 创建切面类 -->
	<bean id="myAspect" class="aop_aspect_xml.MyAspect"></bean>


	<!-- 3 aop编程 
		<aop:aspect> 将切面类 声明“切面”，从而获得通知（方法）
		   ref 切面类引用
		<aop:pointcut> 声明一个切入点，所有的通知都可以使用。
			expression 切入点表达式
			id 名称，用于其它通知引用
	-->
	<aop:config>
		<aop:aspect ref="myAspect">
			<aop:pointcut expression="execution(* aop_aspect_xml.UserServiceImpl.*(..))" id="myPointcat"/>
			
			<!-- 3.1 前置通知 
				<aop:before method="" pointcut="" pointcut-ref=""/>
					method : 通知，及方法名
					pointcut :切入点表达式，此表达式只能当前通知使用。
					pointcut-ref ： 切入点引用，可以与其他通知共享切入点。
				通知方法格式：public void before(JoinPoint joinPoint){
					参数1：org.aspectj.lang.JoinPoint  用于描述连接点（目标方法），获得目标方法名等
					
				<aop:before method="before" pointcut-ref="myPointcat"/>
			-->
			
			<!-- 3.2后置通知  ,目标方法后执行，获得返回值
				<aop:after-returning method="" pointcut-ref="" returning=""/>
					returning 通知方法第二个参数的名称
				通知方法格式：public void afterReturning(JoinPoint joinPoint,Object ret){
					参数1：连接点描述
					参数2：类型Object，参数名 returning="ret" 配置的
					
			    <aop:after-returning method="afterReturning" pointcut-ref="myPointcat" returning="ret"/>
			-->
			
			<!-- 3.3 环绕通知 
				<aop:around method="" pointcut-ref=""/>
				通知方法格式：public Object around(ProceedingJoinPoint joinPoint) throws Throwable{
					返回值类型：Object
					方法名：任意
					参数：org.aspectj.lang.ProceedingJoinPoint
					抛出异常 
				执行目标方法：Object obj = joinPoint.proceed();
				
			-->
			<aop:around method="around" pointcut-ref="myPointcat"/>
			
			
			<!-- 3.4 抛出异常
				<aop:after-throwing method="" pointcut-ref="" throwing=""/>
					throwing ：通知方法的第二个参数名称
				通知方法格式：public void afterThrowing(JoinPoint joinPoint,Throwable e){
					参数1：连接点描述对象
					参数2：获得异常信息，类型Throwable ，参数名由throwing="e" 配置
			
			    <aop:after-throwing method="afterThrowing" pointcut-ref="myPointcat" throwing="e"/>
			-->
			
			<!-- 3.5 最终通知
				<aop:after method="after" pointcut-ref="myPointcat"/>
			 -->			
			
		
		
		</aop:aspect>
	</aop:config>

</beans>


