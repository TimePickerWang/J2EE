ndarray.ndim:     rank(number of axes)
ndarray.shape:    数组的形状，是一个元组，2*3的数组值为(2,3)
ndarray.size:     数组的元素总数
ndarray.dtype：   数组内元素的类型：int32,int64等


创建数组：
    1.通过list或者tuple创建,运用array方法如：a = np.array([2,3,4])
      二维或者多为数组：b = np.array([(1.5,2,3), (4,5,6)])
    2.np.zeros((3,4))：创建3*4且元素都为0的矩阵；np.ones((2,3))：创建2*6且元素都为1的矩阵；
      np.empty((2,3))：创建2*3且元素为随机数的矩阵；
    3.np.arange(10, 30, 5)： 和range类似，返回一个arrays而不是list,第一个参数为开始值，
      第二个是结束值，第三个是步长。之前返回array([10, 15, 20, 25])
    4.np.linspace(0, 2, 9):   0到2之间步长相同的9个值
      array([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])


基本操作：
    1.b = np.arange(4)
      b**2:  b=[0,1,4,9]
    2.矩阵a,b相乘：a.dot(b) 或者 np.dot(a, b)
      注：a*b只是把a、b对应的元素相乘
    3.a.sum()： 矩阵a中所有元素之和
      a.min()： 矩阵a中的最小元素
      a.max()： 矩阵a中的最大元素
    4. np.sqrt(b)：对b中的每个元素开方，返回处理后的矩阵
       np.add(a, b)： 将a和b进行相加


索引、切片和迭代(多维)：
    1.b = [[ 0,  1,  2,  3],
	   [10, 11, 12, 13],
           [20, 21, 22, 23],
           [30, 31, 32, 33],
           [40, 41, 42, 43]]
      b[0:5, 1]  :返回 array([ 1, 11, 21, 31, 41])
      b[ : ,1]   :返回 array([ 1, 11, 21, 31, 41])
      b[1:3, : ] :返回 array([[10, 11, 12, 13],
			      [20, 21, 22, 23]])
      b[-1]      :返回最后一行 array([40, 41, 42, 43])
    2.for element in b.flat:
         print(element)
      打印每一个元素


形状操控：
     a = np.floor(10*np.random.random((3,4)))
     a = [[ 2.,  8.,  0.,  6.],
          [ 4.,  5.,  1.,  1.],
          [ 8.,  9.,  3.,  6.]]
    1.a.ravel()  :返回 array([ 2.,  8.,  0.,  6.,  4.,  5.,  1.,  1.,  8.,  9.,  3.,  6.])
      a.flatten():返回同上，和ravel()的区别是，对ravel()得到的结果进行修改，会改变原始矩阵，而flatten()不会
    2.a.reshape(6,2)  :返回6*2的矩阵
    注：以上方法不会改变矩阵本身的形状
    3.a.resize((2,6))  返回2*6的矩阵


拼接不同的数组：
    1.np.vstack((a,b))  :把a,b垂直拼接
    2.np.hstack((a,b))  :把a,b水平拼接


线性代数：
      a = np.array([[1.0, 2.0], [3.0, 4.0]])
    1.矩阵转置: a.transpose()
    2.逆矩阵:   np.linalg.inv(a)
    3.单位矩阵：np.eye(2)
    4.矩阵相乘：np.dot (a, a)
    5.矩阵求解：np.linalg.solve(a, b)   如果结果为x,则6中
    6.验证矩阵在误差允许范围内是否相等：np.allclose(np.dot(a, x), b)



Numpy中矩阵matrix对象
    a = np.matrix([[1, 2], [1, 3], [1, 4]])
    b = np.matrix('1 2 7; 3 4 8; 5 6 9')
    1.矩阵对应位置相乘
      np.multiply(b[:, 2], a[:, 1]) 
      结果为:[[14]
              [24]
	      [36]]
    2.矩阵转置：matrix.T
    3.矩阵的逆：matrix.I


